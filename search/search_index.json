{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QuickForge Studio Plugins","text":"<p>Welcome to the official documentation hub for all QuickForge Studio plugins for Unreal Engine 5.</p>"},{"location":"#available-plugins","title":"\ud83d\udce6 Available Plugins","text":""},{"location":"#savekit-lite","title":"\ud83d\udd39 SaveKit Lite","text":"<p>Minimalist save/load system for Blueprint-first workflows. Easy to integrate and production-ready.</p>"},{"location":"#savekit-pro","title":"\ud83d\udd39 SaveKit Pro","text":"<p>Coming soon \u2014 a powerful extension of SaveKit Lite with advanced features for larger projects.</p>"},{"location":"#about","title":"\ud83d\udcd8 About","text":"<p>Each plugin comes with a detailed setup guide, blueprint integration examples, and usage best practices.</p> <p>Stay tuned for more tools designed to enhance your UE5 development workflow.</p>"},{"location":"SaveKitLite/","title":"\ud83e\udde0 SaveKit Lite \u2013 Easy Blueprint Save System for UE5 (C++ Backend)","text":"<p>SaveKit Lite is a minimalist save/load system for Unreal Engine 5 with full Blueprint support. Implemented in C++, designed for easy use in Blueprints.</p> <p>It allows you to save and load:</p> <ul> <li>\ud83c\udfae Actor transform (location, rotation, scale)</li> <li>\ud83e\udde0 Custom string variables (like score, health, state)</li> <li>\ud83c\udff7\ufe0f Actor tags and properties marked as <code>SaveGame</code></li> <li>\ud83d\udcbe Metadata about save slots for UI display</li> </ul>"},{"location":"SaveKitLite/#why-savekit-lite","title":"\ud83d\udca1 Why SaveKit Lite?","text":"<p>Unlike Unreal Engine's native Save Game system, SaveKit Lite gives you:</p> <ul> <li>\ud83e\udde9 Actor-level saving with no custom classes</li> <li>\ud83d\udd01 Built-in transform &amp; tag support</li> <li>\ud83d\udce6 Key-value variable system for runtime data</li> <li>\ud83d\udcca Metadata for UI display (slot name, version, timestamp)</li> <li>\ud83c\udfaf Built in C++, but used entirely via Blueprints \u2013 no coding required</li> </ul> <p>Want to know more? See the Comparison with UE Save System (this file is part of the documentation bundle)</p> <p>\ud83d\udce6 SaveKit Lite is designed to be simple and extendable \u2014 ideal for indie projects, prototyping, and modular virtual world systems.</p>"},{"location":"SaveKitLite/blueprint-reference/","title":"\ud83d\udcd8 Blueprint Function Reference","text":"<p>This section lists all Blueprint-accessible functions provided by SaveKit Lite, grouped by category.</p>"},{"location":"SaveKitLite/blueprint-reference/#category-save-kit-slots","title":"\ud83d\udd39 Category: Save Kit \u2192 Slots","text":""},{"location":"SaveKitLite/blueprint-reference/#getexistingsaveslots","title":"<code>GetExistingSaveSlots()</code>","text":"<ul> <li>Returns: <code>Array of Strings</code></li> <li>Description: Lists all save slot names found in the save directory.</li> </ul>"},{"location":"SaveKitLite/blueprint-reference/#getsaveslotinfos","title":"<code>GetSaveSlotInfos()</code>","text":"<ul> <li>Returns: <code>Array of SaveSlotInfo Structures</code></li> <li>Description: Returns metadata for all existing save slots (slot name, save time, save version).</li> </ul>"},{"location":"SaveKitLite/blueprint-reference/#loadsavemetaslotname-see-also-uimd-for-usage-in-preview","title":"<code>LoadSaveMeta(SlotName)</code> (see also: <code>ui.md</code> for usage in preview)","text":"<ul> <li>Input: <code>FString SlotName</code></li> <li>Returns: <code>SaveSlotInfo Structure</code></li> <li>Description: Returns metadata only \u2014 does NOT load or apply saved state.</li> </ul>"},{"location":"SaveKitLite/blueprint-reference/#category-save-kit","title":"\ud83d\udd39 Category: Save Kit","text":""},{"location":"SaveKitLite/blueprint-reference/#savegameslotname-saveversion","title":"<code>SaveGame(SlotName, ``SaveVersion``)</code>","text":"<ul> <li>Input: <code>FString SlotName</code>, `int32 ``SaveVersion``` (optional)</li> <li>Description: Saves all actors with a Saveable component to the specified slot.</li> </ul>"},{"location":"SaveKitLite/blueprint-reference/#loadgameslotname","title":"<code>LoadGame(SlotName)</code>","text":"<ul> <li>Input: <code>FString SlotName</code></li> <li>Description: Loads and applies saved actor data from the specified slot.</li> </ul>"},{"location":"SaveKitLite/blueprint-reference/#category-save-kit-saveable-component-functions","title":"\ud83d\udd39 Category: Save Kit \u2192 Saveable (component functions)","text":""},{"location":"SaveKitLite/blueprint-reference/#setvariablename","title":"<code>SetVariable(Name)</code>","text":"<ul> <li>Description: Sets a string variable in the Saveable component.</li> </ul>"},{"location":"SaveKitLite/blueprint-reference/#getvariablename","title":"<code>GetVariable(Name)</code>","text":"<ul> <li>Description: Gets the string value of a saved variable.</li> </ul>"},{"location":"SaveKitLite/blueprint-reference/#getvariableasintname","title":"<code>GetVariableAsInt(Name)</code>","text":"<ul> <li>Description: Parses the variable\u2019s value as an integer and returns it.</li> </ul>"},{"location":"SaveKitLite/blueprint-reference/#hasvariablename","title":"<code>HasVariable(Name)</code>","text":"<ul> <li>Description: Checks whether a variable with the specified name exists.</li> </ul>"},{"location":"SaveKitLite/blueprint-reference/#incrementvariablename","title":"<code>IncrementVariable(Name)</code>","text":"<ul> <li>Description: Adds the specified amount to the variable\u2019s value (as number).</li> </ul>"},{"location":"SaveKitLite/blueprint-reference/#removevariablename","title":"<code>RemoveVariable(Name)</code>","text":"<ul> <li>Description: Removes the variable from saved state.</li> </ul>"},{"location":"SaveKitLite/blueprint-reference/#save-slot-info-object","title":"\ud83e\uddf1 Save Slot Info Object","text":""},{"location":"SaveKitLite/blueprint-reference/#initslotname-time-version","title":"<code>Init(SlotName, Time, Version)</code>","text":"<ul> <li>Description: Initializes a SaveSlotInfoObject with name, time and version.</li> </ul>"},{"location":"SaveKitLite/blueprint-reference/#notes","title":"\ud83d\udce6 Notes","text":"<ul> <li>All function categories are searchable using context-sensitive Blueprint menus.</li> <li>You can use these functions inside UMG widgets, level Blueprints, or actor graphs.</li> </ul>"},{"location":"SaveKitLite/comparison/","title":"\u2696\ufe0f SaveKit Lite vs. Unreal Engine Save Game System","text":"<p>While Unreal Engine provides built-in Save Game functionality, SaveKit Lite is designed to make common save/load tasks simpler, faster, and entirely Blueprint-accessible \u2014 with no boilerplate setup.</p>"},{"location":"SaveKitLite/comparison/#core-differences","title":"\ud83d\udd0d Core Differences","text":"Feature UE Save System SaveKit Lite Requires custom SaveGame class \u2705 Yes \u274c No (uses built-in type) Actor transform saving \u274c Manual \u2705 Built-in via flag Actor tag saving \u274c Manual \u2705 Automatic Custom variable system \u274c You define it \u2705 Key-value system Component-based setup \u274c No \u2705 <code>Saveable</code> component Auto actor discovery in level \u274c No \u2705 Uses <code>TActorIterator</code> UI metadata (time, version, slot) \u274c No \u2705 Built-in structs Save versioning \u274c Manual (code) \u2705 Optional param in node Blueprint-only workflow \u26a0\ufe0f Partially \u2705 100% supported"},{"location":"SaveKitLite/comparison/#use-savekit-lite-when-you-want","title":"\ud83c\udfaf Use SaveKit Lite When You Want:","text":"<ul> <li>Faster prototyping of save/load features</li> <li>A no-code, Blueprint-only workflow</li> <li>Automatic saving of transforms, variables, and tags</li> <li>UI integration with <code>ListView</code> or buttons</li> <li>Slot metadata and save version control</li> </ul>"},{"location":"SaveKitLite/comparison/#when-to-use-native-savegame","title":"\u2757 When to Use Native SaveGame","text":"<p>If you need:</p> <ul> <li>Full control of serialized data structures</li> <li>Complex nested objects or UObject arrays</li> <li>Custom asynchronous systems at scale</li> </ul> <p>Then native SaveGame + C++ may be better.</p> <p>\u2705 For 90% of common use cases \u2014 SaveKit Lite is faster, easier, and modular.</p> <p>\ud83d\udca1 You can extend SaveKit Lite with C++ if needed, e.g. for advanced serialization or object reconstruction.</p>"},{"location":"SaveKitLite/demo/","title":"\ud83c\udfae Demo Level \u2013 Quick Start Walkthrough","text":"<p>The SaveKit Lite demo level is included to showcase the core features of the plugin in a live environment.</p>"},{"location":"SaveKitLite/demo/#whats-included","title":"\ud83e\udde9 What's Included","text":"<ul> <li>A simple level with interactable actors</li> <li>Save/load logic bound to UI buttons</li> <li>Real-time updates to transform and variables</li> <li>UI <code>ListView</code> to preview existing save slots</li> </ul>"},{"location":"SaveKitLite/demo/#how-to-use","title":"\ud83d\udee0 How to Use","text":"<ol> <li>Enable the plugin in your UE5 project</li> <li>Open the demo map located under:    <code>Plugins/SaveKitLite/Content/Maps/DemoLevel.umap</code></li> <li>Press Play to test:</li> <li>Move the character or actor</li> <li>Click Save</li> <li>Move again</li> <li>Click Load to restore</li> </ol>"},{"location":"SaveKitLite/demo/#features-demonstrated","title":"\ud83e\udde0 Features Demonstrated","text":"Feature Demonstrated? Saveable \u2705 Variable updates \u2705 Actor transform saving \u2705 Tags preservation \u2705 Save slot UI \u2705 Metadata preview \u2705 <p>\ud83d\udca1 Use this demo as a starting point to implement your own save/load system by copying logic into your levels or UI widgets.</p>"},{"location":"SaveKitLite/demo/#how-to-modify","title":"\ud83d\udee0 How to Modify","text":"<p>To adapt the demo to your game:</p> <ul> <li>Copy the demo UI widgets (e.g. <code>WBP_SaveMenu</code>) to your project</li> <li>Replace actor Blueprints with your own and attach <code>Saveable</code></li> <li>Customize save/load buttons and hook up nodes from SaveKit</li> <li>\ud83d\udca1 To showcase variable saving, call <code>SetVariable</code> before <code>SaveGame</code></li> </ul>"},{"location":"SaveKitLite/limitations/","title":"\u26a0\ufe0f Limitations &amp; Best Practices","text":"<p>While SaveKit Lite is powerful and easy to use, it's important to understand its design boundaries.</p>"},{"location":"SaveKitLite/limitations/#what-is-not-supported","title":"\u274c What is NOT supported","text":"Unsupported Feature Why? Saving UObject references Can't be serialized as text safely Arrays of components No automatic serialization available Blueprint-only dynamic spawning Matching on name only, no GUIDs Level streaming SaveKit Lite is level-instance-based only"},{"location":"SaveKitLite/limitations/#best-practices","title":"\ud83e\udde0 Best Practices","text":"<ul> <li>\u2705 Ensure each actor has a unique name in the level</li> <li>\u2705 Use <code>VariablesToSave</code> for any dynamic state that isn't stored in properties</li> <li>\u2705 If you need to save complex data \u2014 break it into string tokens</li> <li>\u2705 For objects spawned at runtime \u2014 consider recreating them manually on Load</li> <li>\u2705 Use consistent slot naming (e.g., <code>AutoSave</code>, <code>Quick1</code>, <code>Checkpoint</code>)</li> <li>\u2705 Don't rely on object references \u2014 instead store IDs or lookup keys</li> </ul>"},{"location":"SaveKitLite/limitations/#suggestions","title":"\ud83d\udd27 Suggestions","text":"<p>If you need:</p> <ul> <li>World-level saving across maps \u2192 use GameInstance or a wrapper</li> <li>Custom object handling \u2192 extend Saveable with your logic</li> <li>Large game state persistence \u2192 look into full save systems or Pro-tier solutions</li> </ul> <p>\ud83d\udca1 Need advanced serialization? Use custom logic in C++ or external solutions like JSON.</p>"},{"location":"SaveKitLite/quick-start/","title":"\ud83d\ude80 Quick Start","text":"<p>Getting started with SaveKit Lite takes just a few steps:</p>"},{"location":"SaveKitLite/quick-start/#1-add-the-saveable-component","title":"1. Add the <code>Saveable</code> Component","text":"<p>Open the Blueprint of any actor you want to save (e.g. character, item, enemy):</p> <ul> <li>Click Add Component</li> <li>Select <code>Saveable</code> from the list</li> </ul> <p></p>"},{"location":"SaveKitLite/quick-start/#2-use-blueprint-nodes-to-save-and-load","title":"2. Use Blueprint Nodes to Save and Load","text":"<p>Use these nodes in any Blueprint:</p> <ul> <li><code>Save Kit \u2192 SaveGame(SlotName)</code></li> <li><code>Save Kit \u2192 LoadGame(SlotName)</code></li> </ul> <p></p>"},{"location":"SaveKitLite/quick-start/#3-done","title":"3. Done \u2705","text":"<p>Your actor\u2019s state is now persistent between play sessions.</p>"},{"location":"SaveKitLite/quick-start/#advanced-configuration","title":"\u2699\ufe0f Advanced Configuration","text":"<p>You can customize the <code>Saveable</code> component with the following settings:</p> Setting Description <code>Save Transform</code> Saves actor's location, rotation, and scale <code>Variables To Save</code> Custom key-value string pairs for runtime data <code>Apply Control Rotation</code> Applies saved actor rotation to the controller (only if owner is a Character with a controller) <p></p> <p>\ud83d\udca1 Example <code>Variables To Save</code>:</p> <pre><code>- Health\n- IsDamaged\n- Score\n</code></pre> <p>\ud83d\udccc Need more advanced usage?</p> <p>See:</p> <ul> <li>Save &amp; Load \u2014 SaveGame, LoadGame, metadata, slot handling</li> <li>Variables \u2014 Working with runtime values like Health or Score</li> </ul>"},{"location":"SaveKitLite/save-load/","title":"\ud83d\udcbe Saving &amp; Loading Game State","text":"<p>SaveKit Lite provides simple Blueprint functions to persist and restore actor state across gameplay sessions.</p> <p>Want to store runtime data like counters or flags? See Working with Variables.</p>"},{"location":"SaveKitLite/save-load/#save-game","title":"\ud83d\udd18 Save Game","text":"<p>Use the node:</p> <pre><code>Save Kit \u2192 SaveGame(SlotName [, ``SaveVersion``])\n</code></pre> <p></p> <p>This Blueprint example saves to slot <code>Profile_1</code> with version <code>1</code>.</p> <p>This will:</p> <ul> <li>Create or overwrite a save slot with the given name</li> <li>Collect all actors in the level with a <code>Saveable</code> component</li> <li>Store their transform (if enabled), custom variables, tags, and any <code>SaveGame</code> properties</li> </ul>"},{"location":"SaveKitLite/save-load/#load-game","title":"\ud83d\udd01 Load Game","text":"<p>Use:</p> <pre><code>Save Kit \u2192 LoadGame(SlotName)\n</code></pre> <p></p> <p>Restores the saved state of all matching actors in the current level.</p> <p>This will:</p> <ul> <li>Load the specified save slot</li> <li>Match actors by name in the current level</li> <li>Apply the saved state to each actor that has a <code>Saveable</code> component</li> </ul> <p>\u26a0\ufe0f Make sure actor names in the level match the saved names.</p>"},{"location":"SaveKitLite/save-load/#optional-save-version","title":"\ud83d\udd22 Optional Save Version","text":"<p>The <code>SaveGame()</code> node includes an optional second parameter: <code>SaveVersion</code>.</p> <ul> <li>If not specified, version defaults to <code>1</code></li> <li>You can set a custom version manually (e.g. <code>2</code>, <code>5</code>, <code>1001</code>) to track changes in save data format</li> </ul>"},{"location":"SaveKitLite/save-load/#example-versioning-use-case","title":"Example: versioning use case","text":"<p>To detect outdated slots and act accordingly, you could compare <code>SaveVersion</code> on load:</p> <pre><code>if SaveVersion &lt; 2 then ShowWarning()\n</code></pre> <pre><code>SaveGame(`AutoSave`, 3)\n</code></pre> <p></p> <p>This example stores a save under slot <code>AutoSave</code> with version <code>3</code>.</p> <p>You can retrieve and display the version later via:</p> <ul> <li><code>GetSaveSlotInfos()</code> \u2192 returns <code>SaveVersion</code> along with slot name and time</li> <li>UI widgets (e.g. <code>ListView</code> using <code>SaveSlotInfoObject</code>)</li> </ul>"},{"location":"SaveKitLite/save-load/#use-cases-for-saveversion","title":"\ud83e\udde0 Use Cases for <code>SaveVersion</code>","text":"<ul> <li>Detect outdated save slots</li> <li>Display save version in UI (e.g. <code>\"v2\"</code>)</li> <li>Create conditional logic to migrate or reject old saves</li> </ul>"},{"location":"SaveKitLite/save-load/#what-else-gets-saved","title":"\ud83c\udff7\ufe0f What Else Gets Saved?","text":"<p>In addition to Saveable variables, SaveKit Lite also saves:</p> Type Notes Transform Saved if <code>Save Transform</code> is enabled Actor Tags Saved automatically UPROPERTY(SaveGame) fields Saved if they support text serialization"},{"location":"SaveKitLite/save-load/#save-slot-location","title":"\ud83d\udcc1 Save Slot Location","text":"<p>In packaged builds, saves are stored under:</p> <pre><code>Saved/SaveGames/\n</code></pre> <p>This applies to both <code>.sav</code> files and their metadata.</p>"},{"location":"SaveKitLite/ui/","title":"\ud83d\uddbc\ufe0f UI Integration \u2013 Displaying Save Slots","text":"<p>SaveKit Lite allows you to display available save slots in a user interface using standard Blueprint nodes.</p> <p>You can:</p> <ul> <li>Show all existing save slots (by name)</li> <li>Retrieve and display metadata (save time, version)</li> <li>Load selected slots from the UI</li> </ul>"},{"location":"SaveKitLite/ui/#1-show-available-save-slots","title":"\ud83d\udcc2 1. Show Available Save Slots","text":"<p>Use the node:</p> <pre><code>Save Kit \u2192 Slots \u2192 GetExistingSaveSlots()\n</code></pre> <p></p> <p>This returns an array of <code>FString</code> slot names. You can use this to populate a <code>ListView</code>, combo box, or buttons dynamically.</p>"},{"location":"SaveKitLite/ui/#2-get-metadata-for-each-slot","title":"\ud83e\udde0 2. Get Metadata for Each Slot","text":"<p>Use:</p> <pre><code>Save Kit \u2192 Slots \u2192 GetSaveSlotInfos()\n</code></pre> <p></p> <p>This returns an array of <code>FSaveSlotInfo</code> structs with:</p> Field Type Description <code>SlotName</code> <code>FString</code> Save slot name <code>SaveTime</code> <code>FDateTime</code> Timestamp when the slot was saved <code>SaveVersion</code> <code>int32</code> Format or version indicator <p>Useful for building save/load menus with detailed information.</p>"},{"location":"SaveKitLite/ui/#blueprint-example-populate-listview","title":"\ud83d\udce6 Blueprint Example \u2013 Populate ListView","text":"<p>Use this logic to populate a ListView with metadata:</p> <p></p>"},{"location":"SaveKitLite/ui/#3-display-info-in-list-entry","title":"\ud83e\uddf1 3. Display Info in List Entry","text":"<p>Each ListView item can use a <code>SaveSlotInfoObject</code> to display save name, time, and version.</p> <p>Below is a full example that:</p> <ul> <li>Displays the save slot name</li> <li>Formats and shows the save time using <code>FormatText</code></li> <li>Prepends version number like <code>v1</code></li> </ul> <p></p> <p>Blueprint setup for <code>OnListItemObjectSet</code> inside a ListView entry widget.</p> <p>Make sure your widget implements <code>UserObjectListEntry</code>, which allows binding metadata to list items.</p>"},{"location":"SaveKitLite/ui/#4-load-metadata-for-selected-slot","title":"\ud83e\uddfe 4. Load Metadata for Selected Slot","text":"<p>Use:</p> <pre><code>Save Kit \u2192 Slots \u2192 LoadSaveMetadata(SlotName)\n</code></pre> <p></p> <p>Returns a <code>SaveSlotInfo</code> struct for the selected slot. Use it when you want to preview a slot before loading.</p>"},{"location":"SaveKitLite/ui/#5-additional-nodes","title":"\ud83d\udcd8 5. Additional Nodes","text":"<p>These nodes are used to build the save/load UI:</p> <ul> <li><code>GetExistingSaveSlots()</code></li> <li><code>GetSaveSlotInfos()</code></li> <li><code>LoadSaveMetadata(SlotName)</code> \u2192 returns metadata</li> <li><code>LoadGame(SlotName)</code> \u2192 loads the selected save</li> </ul> <p>You can use these in UMG widgets, buttons, or combo boxes.</p>"},{"location":"SaveKitLite/ui/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Sort slots by <code>SaveTime</code> to show newest first</li> <li>Format <code>SaveTime</code> as <code>\"dd.MM.yyyy HH:mm\"</code> for better readability</li> <li>Use <code>AutoSave</code> or <code>Profile_1</code> as consistent slot names</li> </ul>"},{"location":"SaveKitLite/variables/","title":"\ud83e\udde0 Working with Variables","text":"<p>The <code>Saveable</code> component allows storing key-value string pairs during runtime.</p>"},{"location":"SaveKitLite/variables/#blueprint-functions","title":"\ud83d\udd01 Blueprint Functions","text":"<p>Available under <code>Save Kit \u2192 Saveable</code>:</p> <ul> <li><code>SetVariable(Name, Value)</code> \u2014 set a string value at runtime</li> <li><code>GetVariable(Name)</code> \u2014 get string value</li> <li><code>GetVariableAsInt(Name)</code> \u2014 parse as integer</li> <li><code>HasVariable(Name)</code> \u2014 check if variable exists</li> <li><code>IncrementVariable(Name, Amount)</code> \u2014 add to numeric value</li> <li><code>RemoveVariable(Name)</code> \u2014 delete variable</li> </ul> <p></p>"},{"location":"SaveKitLite/variables/#example-using-saveable-functions","title":"\u2699\ufe0f Example: Using Saveable Functions","text":"<p>Use Saveable functions to manage data at runtime:</p> <ul> <li><code>SetVariable</code> \u2014 assign a value</li> <li><code>GetVariableAsInt</code> \u2014 retrieve and modify numeric values</li> <li><code>IncrementVariable</code> \u2014 track counts or scores</li> </ul> <p></p> <p>Example: reducing Health, marking as Damaged, and incrementing HitCount.</p>"},{"location":"SaveKitLite/variables/#saveable-variables-vs-savegame-properties","title":"\ud83c\udd9a Saveable Variables vs SaveGame Properties","text":"Method Defined In Access at Runtime Saved by SaveKit <code>Saveable</code> Variables Saveable Component \u2714\ufe0f via Blueprint nodes \u2714\ufe0f Yes <code>SaveGame</code> UPROPERTY Actor/Blueprint field \u2714\ufe0f directly (Get/Set) \u2714\ufe0f Yes (if serializable) <p>Use <code>Saveable</code> for flexible runtime state, and <code>SaveGame</code> for native Blueprint variables.</p> <p></p> <p>Note: Actor transform, tags, and SaveGame properties are also saved. See Saving &amp; Loading for details.</p>"},{"location":"SaveKitLite/variables/#example-displaying-saved-data","title":"\ud83e\uddea Example: Displaying Saved Data","text":"<p>Use <code>GetVariable</code>, <code>Tags</code>, and <code>SaveGame</code> properties to dynamically show state:</p> <p></p> <p>This Blueprint formats and displays Health, HitCount, Tags, and Damaged state.</p>"},{"location":"SaveKitLite/variables/#unsupported-types","title":"\u274c Unsupported Types","text":"<ul> <li>UObject references</li> <li>Arrays of objects</li> </ul> <p>Use IDs or reconstruct them manually after loading.</p> <p>\u2139\ufe0f See Limitations for serialization compatibility.</p>"},{"location":"SaveKitPro/","title":"SaveKit Pro","text":"<p>\ud83d\ude80 Next-gen saving system for Unreal Engine Based on SaveKit Lite, with powerful features for larger, more complex projects.</p>"},{"location":"SaveKitPro/#key-features","title":"Key Features:","text":"<ul> <li>Autosave with flexible triggers</li> <li>Multiplayer-ready architecture</li> <li>World Partition &amp; Streaming Level support</li> <li>Complex data: arrays, maps, custom objects</li> <li>Save versioning and migration</li> <li>Save slot previews and metadata</li> </ul> <p>\ud83d\udce2 All updates, previews and access via Discord only Join our community: QuickForge Studio on Discord</p> <p>Pro edition planned for release in Q3 2025</p>"}]}